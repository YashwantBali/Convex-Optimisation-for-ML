# -*- coding: utf-8 -*-
"""problem1_basis_pursuit.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7RgwWSlRJ4dK5QmaEOvZcOqTnVm7ZpL
"""

import numpy as np
import cvxpy as cp

def solve_problem1(lambda_vals=[0.01, 0.1, 1.0]):
    np.random.seed(0)
    m, n = 40, 100
    A = np.random.randn(m, n)
    x_true = np.zeros(n)
    nonzero_indices = np.random.choice(n, 10, replace=False)
    x_true[nonzero_indices] = np.random.randn(10)
    b = A @ x_true

    print("L1 Regularization Results:")
    for lam in lambda_vals:
        x = cp.Variable(n)
        obj = cp.Minimize(cp.sum_squares(A @ x - b) + lam * cp.norm1(x))
        prob = cp.Problem(obj)
        prob.solve()
        print(f"Î» = {lam:.2f}, Non-zero elements in solution: {(np.abs(x.value) > 1e-3).sum()}")

    print("\nL2 Regularization Results:")
    for lam in lambda_vals:
        x = cp.Variable(n)
        obj = cp.Minimize(cp.sum_squares(A @ x - b) + lam * cp.sum_squares(x))
        prob = cp.Problem(obj)
        prob.solve()
        print(f"Î» = {lam:.2f}, Non-zero elements in solution: {(np.abs(x.value) > 1e-3).sum()}")