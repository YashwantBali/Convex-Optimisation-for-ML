# -*- coding: utf-8 -*-
"""problem2_bqp_sdp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7RgwWSlRJ4dK5QmaEOvZcOqTnVm7ZpL
"""

import numpy as np
import cvxpy as cp

def solve_problem2(n=100, num_random_samples=50):
    np.random.seed(1)
    A = np.random.randn(n, n)
    C = A @ A.T  # symmetric PSD

    X = cp.Variable((n, n), PSD=True)
    obj = cp.Maximize(cp.trace(C @ X))
    constraints = [cp.diag(X) == 1]
    prob = cp.Problem(obj, constraints)
    prob.solve()

    print(f"SDP relaxation objective: {prob.value:.4f}")

    eigvals, eigvecs = np.linalg.eigh(X.value)
    sqrt_X = eigvecs @ np.diag(np.sqrt(np.maximum(eigvals, 0))) @ eigvecs.T
    best_val = -np.inf

    for _ in range(num_random_samples):
        rand_vec = np.random.randn(n)
        x_rand = np.sign(sqrt_X @ rand_vec)
        val = x_rand.T @ C @ x_rand
        if val > best_val:
            best_val = val

    print(f"Best boolean x objective via randomization: {best_val:.4f}")