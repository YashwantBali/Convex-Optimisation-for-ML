# -*- coding: utf-8 -*-
"""problem3_sinr_gp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7RgwWSlRJ4dK5QmaEOvZcOqTnVm7ZpL
"""

import numpy as np
import cvxpy as cp

def solve_problem3(K=4, tol=1e-3):
    np.random.seed(2)
    G = np.random.rand(K, K)
    noise = np.random.uniform(0.1, 0.5, K)
    Pmax = 10.0

    def is_feasible(gamma):
        p = cp.Variable(K)
        constraints = [p >= 0, p <= Pmax]
        for i in range(K):
            interf = cp.sum(cp.multiply(G[i, :], p)) - G[i, i] * p[i]
            constraints.append((G[i, i] * p[i]) >= gamma * (interf + noise[i]))
        prob = cp.Problem(cp.Minimize(0), constraints)
        prob.solve(solver=cp.SCS)
        return prob.status == cp.OPTIMAL or prob.status == cp.OPTIMAL_INACCURATE

    low, high = 0.01, 100.0
    while high - low > tol:
        mid = (low + high) / 2
        if is_feasible(mid):
            low = mid
        else:
            high = mid

    print(f"Maximum common SINR achievable: {low:.4f}")